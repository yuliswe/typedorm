import {
  AUTO_GENERATE_ATTRIBUTE_STRATEGY,
  Attribute,
  AutoGenerateAttribute,
  Entity,
  INDEX_TYPE,
} from 'src/common';
import { testTable } from './test-table';

enum ENTITY_STATE {
  ACTIVE = 1,
}

export enum ARTICLE_STAGE {
  INITIALIZED = 1001,
  INBOUND = 1002,
  PREPARE_FOR_PHOTOSHOOT = 1003,
  PHOTOSHOOTING = 1004,
  OUTBOUND = 1005,
  NONE = 1006,
}

/**
 * KSUID: string
 */
export interface IArticlePrimaryKey {
  KSUID: string;
}

export interface IArticleGSI1 {
  ContainerId: string;
  KSUID?: string;
}

export interface IArticleGSI2 {
  ContainerId: string;
  KSUID?: string;
}

export interface IArticleGSI3 {
  TransportUnitId: string;
  KSUID?: string;
}

export interface IArticleGSI4 {
  IsoTimeBased: string;
  KSUID?: string;
}

/**
 * Gtin: string
 */
export interface IArticleGSI5 {
  Gtin: string;
}

export interface IArticleLSI1 {
  UpdatedAt: string;
}

export interface IArticleLSI2 {
  Stage: ARTICLE_STAGE;
}

export interface IArticleLSI3 {
  TotalAuxImage: number;
}

export interface IArticleLSI4 {
  TotalRequiredImage: number;
}

@Entity({
  name: 'article',
  table: testTable,
  primaryKey: {
    partitionKey: 'ARTICLE#ARTICLE_KSUID#{{KSUID}}',
    sortKey: 'METADATA#ARTICLE#{{KSUID}}',
  },
  indexes: {
    GSI1: {
      type: INDEX_TYPE.GSI,
      partitionKey: 'CONTAINER#CONTAINER_KSUID#{{ContainerId}}', // test with gsi1 add {{KSUID}}
      sortKey: 'ARTICLE#{{KSUID}}',
    },
    GSI2: {
      type: INDEX_TYPE.GSI,
      partitionKey: 'TRANSPORT_UNIT#TRANSPORT_UNIT_KSUID#{{TransportUnitId}}',
      sortKey: 'ARTICLE#{{KSUID}}',
    },
    GSI3: {
      type: INDEX_TYPE.GSI,
      partitionKey: 'CONTAINER#{{ContainerId}}#ARTICLE#{{KSUID}}',
      sortKey: 'ARTICLE#{{KSUID}}',
      isSparse: true,
    },
    GSI4: {
      type: INDEX_TYPE.GSI,
      partitionKey: 'ARTICLE#{{KSUID}}',
      sortKey: 'TIME_BASED#ARTICLE#{{IsoTimeBased}}',
    },
    GSI5: {
      type: INDEX_TYPE.GSI,
      partitionKey: 'ARTICLE#GTIN',
      sortKey: 'ARTICLE#GTIN#{{Gtin}}',
    },
    LSI1: {
      sortKey: 'ARTICLE#UPDATED_AT#{{UpdatedAt}}',
      type: INDEX_TYPE.LSI,
    },
    LSI2: {
      sortKey: 'ARTICLE#STAGE#{{Stage}}',
      type: INDEX_TYPE.LSI,
    },
    LSI3: {
      sortKey: 'ARTICLE#TOTAL_AUX_IMAGE#{{TotalAuxImage}}',
      type: INDEX_TYPE.LSI,
    },
    LSI4: {
      sortKey: 'ARTICLE#TOTAL_REQUIRED_IMAGE#{{TotalRequiredImage}}',
      type: INDEX_TYPE.LSI,
    },
  },
})
export class Article
  implements
    IArticlePrimaryKey,
    IArticleGSI1,
    IArticleGSI2,
    IArticleGSI3,
    IArticleGSI4,
    IArticleGSI5,
    IArticleLSI1,
    IArticleLSI2,
    IArticleLSI3,
    IArticleLSI4
{
  /**
   * Article's ID, Autogenerated with KSUID strategy
   */
  @AutoGenerateAttribute({ strategy: AUTO_GENERATE_ATTRIBUTE_STRATEGY.KSUID })
  KSUID: string;

  @AutoGenerateAttribute({
    strategy: AUTO_GENERATE_ATTRIBUTE_STRATEGY.ISO_DATE,
    // This tells TypeDORM to auto update this attribute for each update operation on entity
    autoUpdate: true,
  })
  UpdatedAt: string;

  @AutoGenerateAttribute({
    strategy: AUTO_GENERATE_ATTRIBUTE_STRATEGY.ISO_DATE,
  })
  CreatedAt: string;

  @Attribute()
  TransportUnitId: string;

  @Attribute()
  ContainerId: string;

  @Attribute()
  TotalAuxImage: number;

  @Attribute()
  TotalRequiredImage: number;

  @Attribute({ isEnum: true, default: ARTICLE_STAGE.INITIALIZED })
  Stage: ARTICLE_STAGE;

  @Attribute()
  Gtin: string;

  @Attribute()
  Channel: string;

  @Attribute()
  ScanAt: string;

  @Attribute()
  IsRequiredAuxImage: boolean;

  @Attribute()
  Tags: string;

  @Attribute()
  Description: string;

  @Attribute()
  IsoTimeBased: string; // format datetime, eg 2020-11-12T20:04:00 for versioning feature

  @Attribute()
  IssuedDate: string;

  @Attribute()
  Color: string;

  @Attribute()
  Size: string;

  @Attribute({ isEnum: true, default: ENTITY_STATE.ACTIVE })
  State: ENTITY_STATE;

  @Attribute()
  Name: string;

  @Attribute()
  BrandName: string;

  @Attribute()
  ConsumptionTopic: number;
}
